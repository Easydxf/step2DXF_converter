version: '3.8'

services:
  # Main FastAPI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - PORT=8000
      - HOST=0.0.0.0
      - MAX_FILE_SIZE=10485760
      - PROCESSING_TIMEOUT=300
      - MAX_PARTS_PER_ASSEMBLY=20
      - DEFAULT_K_FACTOR=0.5
      - DEFAULT_BEND_RADIUS=1.0
      - REDIS_URL=redis://redis:6379/0
    volumes:
      # Code mounting for development hot reload
      - ./app:/app/app
      - ./freecad_scripts:/app/freecad_scripts
      # Persistent storage for file processing
      - ./temp:/app/temp
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - cad-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cad-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - MAX_FILE_SIZE=10485760
      - PROCESSING_TIMEOUT=300
    volumes:
      - ./app:/app/app
      - ./freecad_scripts:/app/freecad_scripts
      - ./temp:/app/temp
      - ./uploads:/app/uploads
      - ./outputs:/app/outputs
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - cad-network
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=1
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Flower for monitoring Celery (development only)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - cad-network
    restart: unless-stopped
    command: celery -A app.core.celery_app flower --port=5555
    profiles:
      - monitoring

  # Optional: Nginx reverse proxy (production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./outputs:/var/www/outputs:ro
    depends_on:
      - app
    networks:
      - cad-network
    restart: unless-stopped
    profiles:
      - production

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local

# Custom network
networks:
  cad-network:
    driver: bridge

# Development overrides
# To use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
# Create docker-compose.override.yml for local customizations
